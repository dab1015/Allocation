@model SNRWMSPortal.Models.ResetPasswordModel
@{
    ViewBag.Title = "Reset Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="p-5 mb-4">
    <div class="container-fluid py-5">
        <div class="row justify-content-center">

            <div class="col-md-8 d-flex flex-column align-items-center justify-content-center bg-light rounded-3 p-5 position-relative">
                <div class="ribbon"><span>Reset First</span></div>
                <h1 class="fw-bold text-center">Reset Password</h1>
                <form method="post" action="@Url.Action("ResetUserPassword", "Account")" novalidate="" class="mt-2">
                    <div class="container">
                        <div class="fontuser">
                            <label><b>Current Password</b></label>
                            @Html.EditorFor(model => model.currentPassword, new { htmlAttributes = new { placeholder = "Enter Current Password", @class = "form-control ", required = "required" } })
                            <i class="fa fa-vcard fa-lg"></i>
                        </div>



                        @Html.ValidationMessageFor(model => model.currentPassword, "", new { @class = "text-danger" })

                        <div class="fontpassword">
                            <label><b>Password</b></label>
                            @Html.EditorFor(model => model.newPassword, new { htmlAttributes = new { placeholder = "Enter New Password", @class = "form-control ", required = "required" } })
                            <i class="fa fa-key fa-lg"></i>
                        </div>

                        <div class="fontpassword">
                            <label><b>Confirm Password</b></label>
                            @Html.EditorFor(model => model.confirmNewPassword, new { htmlAttributes = new { placeholder = "Confirm Password", @class = "form-control loginform stuffs", required = "required" } })
                            <i class="fa fa-key fa-lg"></i>
                        </div>



                        <ul class="list-unstyled">
                            <li>@Html.ValidationMessageFor(expression: model => model.newPassword, validationMessage: "", htmlAttributes: new { @class = " text-danger " })</li>
                            <li>@Html.ValidationMessageFor(model => model.confirmNewPassword, "", new { @class = "text-danger " })</li>

                        </ul>



                        <button type="submit" class="btn btn-outline-primary align-items-center justify-content-center m-1">Submit</button>
                        <div class="align-items-center justify-content-center mt-3">
                            <span class="text-bg-danger">@ViewBag.error</span>
                            <span class="text-bg-danger">@ViewBag.NotLoggedIn</span>
                            <span class="text-bg-danger">@ViewBag.ErrorCurrentPass</span>

                        </div>
                    </div>
                </form>

            </div>

        </div>
        
        @*<p class="col-md-8 fs-4">Using a series of utilities, you can create this jumbotron, just like the one in previous versions of Bootstrap. Check out the examples below for how you can remix and restyle it to your liking.</p>
            <button class="btn btn-primary btn-lg" type="button">Example button</button>*@
    </div>
</div>
@section scripts{
    @if (@ViewBag.ResetPassword != null)
    {
        <script type="text/javascript" lang="javascript">
            const Toast = Swal.mixin({
                toast: true,
                position: 'top',
                showConfirmButton: false,
                timer: 8000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({
                icon: 'info',
                title: 'You need to reset your password first'
            })



        @*Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'Successfully Login',
            text: '@ViewBag.UserSessionName',
            showConfirmButton: false,
            timer: 1500
        });*@
        </script>
    }

    @if (@ViewBag.ResetStatus == "1")
    {
        <script type="text/javascript" lang="javascript">
            const Toast = Swal.mixin({
                toast: true,
                position: 'top',
                showConfirmButton: false,
                timer: 5000,
                timerProgressBar: true,
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer)
                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                }
            })

            Toast.fire({
                icon: 'info',
                title: 'You need to reset your password first'
            })



        @*Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'Successfully Login',
            text: '@ViewBag.UserSessionName',
            showConfirmButton: false,
            timer: 1500
        });*@
        </script>
    }
    <script>
        $(function () {


            $('#modalRegisterBtn').click(function () {
                $('#modalRegisterForm').modal('show');
            })
            $('#modalResetPasswordBtn').click(function () {
                $('#modalResetPassword').modal('show');
            })


            //$('#loginform').validate({ // initialize the plugin
            //    rules: {
            //        loginuser: {
            //            required: true,
            //            email: true
            //        },
            //        loginpass: {
            //            required: true,
            //            minlength: 5
            //        }
            //    }
            //});


        });
    </script>
}

